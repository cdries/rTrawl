% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fit_levy.R
\encoding{UTF-8}
\name{fit_levy}
\alias{fit_levy}
\title{Estimation of Levy basis}
\usage{
fit_levy(object, ...)
}
\arguments{
\item{object}{object containing all the specifications for the process, see details}

\item{\dots}{any other passthrough parameters}
}
\description{
estimates the parameters of a univariate or multivariate levy basis using
the method of moments
}
\details{
the passed object contains all the process specifications in list format. The following
arguments should be present in the object: levy basis wanted to fit (levy_seed). Both the
first order moments (k1_sample) and the second order cumulants (k2_sample) may be provided.
If these are not present, then the sample moments are estimated and used. In order
to estimate the sample moments, the fitted trawls (trawl) and corresponding trawl
parameters (trawl_par) should be given, along with the vector with time stamps (x_grid),
vector with process values (p_grid), initial observation time (T0), end of observation period (TT).

When fitting a multivariate levy basis, the design matrix (design_matrix) should also
be provided, and a constraints matrix may be provided but is not required.

See the examples for complete use cases.
}
\examples{
### univariate
sim <- sim_trawl(list("levy_seed" = "Skellam", "levy_par" = c(0.131, 0.130),
                      "trawl" = "gig", "trawl_par" = c(0.01, 0.45, -0.6),
                      "T0" = 72.03, "TT" = 75600, "observed_freq" = 1e-6, 
                      "b" = 0))
                      
sim$h <- 0.5
sim$trawl <- "gig"
sim$lag_max <- 3
sim$method <- "acf"
ft <- fit_trawl(sim) 

lv_fit <- fit_levy(list("levy_seed" = "Skellam", "trawl" = "gig",
                        "trawl_par" = ft$trawl_par, "T0" = 72.03, "TT" = 75600,
                        "x_grid" = sim$x_grid, "p_grid" = sim$p_grid))                    

### multivariate
## negative binomial
trawl <- list("gamma", "exp")
trawl_par <- list(c(0.9, 1.8), c(0.5))
levy_par <- matrix(c(1.5, 0.4, 0.3,
                     0.7, 0.4, NA,
                     0.6, 0.3, NA), ncol = 3, byrow = TRUE)
design_matrix <- matrix(c(1, 1, 1, 0, 0, 1), nrow = 2)
sm <- sim_trawl(list("levy_seed" = "negBin", "levy_par" = levy_par,
                     "trawl" = trawl, "trawl_par" = trawl_par,
                     "design_matrix" = design_matrix, "b" = c(0, 0),
                     "T0" = 0, "TT" = 25400, "observed_freq" = 1e-6),
                univariate = FALSE)
  
h <- 1       
lag_max <- 2       
ft1 <- fit_trawl(list("T0" = 0, "TT" = 25400, "method" = "acf", "h" = h, "trawl" = trawl[[1]],
                      "x_grid" = sm$x_grid[[1]], "p_grid" = sm$p_grid[[1]],
                      "lag_max" = lag_max, "b" = 0), multi = 1)
ft2 <- fit_trawl(list("T0" = 0, "TT" = 25400, "method" = "acf", "h" = h, "trawl" = trawl[[2]],
                      "x_grid" = sm$x_grid[[2]], "p_grid" = sm$p_grid[[2]],
                      "lag_max" = lag_max, "b" = 0), multi = 1)
                      
lv_fit <- fit_levy(list("levy_seed" = "negBin", "trawl" = trawl,
                        "trawl_par" = list(ft1$trawl_par, ft2$trawl_par), "T0" = 0, "TT" = 25400,
                        "x_grid" = sm$x_grid, "p_grid" = sm$p_grid, 
                        "design_matrix" = design_matrix))

## Poisson / Skellam
trawl <- list("gamma", "exp")
trawl_par <- list(c(0.9, 1.8), c(0.5))
levy_par <- matrix(c(0.13, 0.13, 0.23, 0.11, 0.05), ncol = 1)
design_matrix <- matrix(c(1, 0, 0, 1, -1, 1, 1, -1, 1, 0), nrow = 2)
sm <- sim_trawl(list("levy_seed" = "Poisson", "levy_par" = levy_par,
                     "trawl" = trawl, "trawl_par" = trawl_par,
                     "design_matrix" = design_matrix, "b" = c(0, 0), 
                     "T0" = 35, "TT" = 24600, "observed_freq" = 1e-6),
                univariate = FALSE)
  
h <- 1
lag_max <- 2              
ft1 <- fit_trawl(list("T0" = 35, "TT" = 24600, "method" = "acf", "h" = h, "trawl" = trawl[[1]],
                      "x_grid" = sm$x_grid[[1]], "p_grid" = sm$p_grid[[1]],
                      "lag_max" = lag_max, "b" = 0), multi = 1)
ft2 <- fit_trawl(list("T0" = 35, "TT" = 24600, "method" = "acf", "h" = h, "trawl" = trawl[[2]],
                      "x_grid" = sm$x_grid[[2]], "p_grid" = sm$p_grid[[2]],
                      "lag_max" = lag_max, "b" = 0), multi = 1)

lv_fit <- fit_levy(list("levy_seed" = "Poisson", "trawl" = trawl, 
                        "trawl_par" = list(ft1$trawl_par, ft2$trawl_par), "T0" = 35, "TT" = 24600,
                        "x_grid" = sm$x_grid, "p_grid" = sm$p_grid, 
                        "design_matrix" = design_matrix))

}
\references{
Barndorff‐Nielsen, O. E., Lunde, A., Shephard, N., & Veraart, A. E. (2014). 
Integer‐valued Trawl Processes: A Class of Stationary Infinitely Divisible Processes. 
Scandinavian Journal of Statistics, 41(3), 693-724.

Veraart, A. E. (2018). 
Modelling, simulation and inference for multivariate time series of counts. 
arXiv preprint arXiv:1608.03154.
}
\seealso{
\code{\link{fit_trawl}}, \code{\link{sim_trawl}}
}
\author{
Dries Cornilly
}
\concept{
trawl
}
